#!/usr/bin/env python
from __future__ import print_function
import subprocess, sys, os

pypirc_contents = \
"""[distutils]
index-servers =
  pypi
  pypitest

[pypi]
repository=https://pypi.python.org/pypi
username=%s
password=%s

[pypitest]
repository=https://testpypi.python.org/pypi
username=%s
password=%s
""" % (os.environ['PYPI_USER'], os.environ['PYPI_PASS'],
       os.environ['PYPI_USER'], os.environ['PYPI_PASS'])

print('Travis CI Passed')

# Prevents merging certain files, i.e. .travis.yml
subprocess.call(['git', 'config', '--global', 'merge.ours.driver', 'true'])

print('Getting current branchname/SHA')
branchname = 'unspecified'
output     = subprocess.check_output(['git', 'branch'])
output     = output.decode('utf-8')
branches   = output.splitlines()
for branch in branches:
    if '*' in branch:
        branchname = branch.replace('*', '')
        branchname = branchname.replace(')', '')
        if branchname.count(' ') > 0:
            branchname = branchname.split()[-1]
        break

print('Branches existing on Travis Server: %s' % output)
print('Branchname (or SHA) is %s' % branchname)

HOME = os.environ['HOME']
TRAVIS_BRANCH = os.environ['TRAVIS_BRANCH']
TRAVIS_PULL_REQUEST = os.environ['TRAVIS_PULL_REQUEST']
print("TRAVIS_BRANCH = ",TRAVIS_BRANCH)
print("TRAVIS_PULL_REQUEST = ",TRAVIS_PULL_REQUEST)


if TRAVIS_BRANCH == "develop" and TRAVIS_PULL_REQUEST == "false":
    
    # Relevant:
    # (Explains the usage of merge-base and merge-tree commands to view if merge is valid
    # http://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option
    
    # Attempt to auto-merge develop into pre-beta if travis tests pass
    
    
    print('Resetting remote/origin')
    subprocess.call(['git', 'remote', 'remove', 'origin'])
    print('Done.')
    print('Re-adding origin..')
    subprocess.call(['git', 'remote', 'add', 'origin', 'https://github.com/pyGSTio/pyGSTi.git'])
    print('Done.')
    print('Updating remote')
    subprocess.call(['git', 'remote', 'update'])
    subprocess.call(['git', 'fetch'])
    
    print('Setting up user credentials')
    
    EMAIL = os.environ['EMAIL']
    USER  = os.environ['USER']
    subprocess.call(['git', 'config', '--global', 'user.email', EMAIL])
    subprocess.call(['git', 'config', '--global', 'user.name',  USER])
    print('Done')
    
    print('Getting the latest version of beta')
    print('Deleting local version, if it exists')
    subprocess.call(['git', 'branch', '-D', 'beta'])    # So that we can verify beta doesn't exist locally
    print('Fetching from origin')
    subprocess.call(['git', 'fetch', 'origin']) # Then grab it..
    print('Recreating local branch')
    subprocess.call(['git', 'checkout', '-b', 'beta', 'origin/beta'])  # And switch to it
    print('Done.')
    print('Getting SHA of merge-base (To view merge tree between %s and beta' % branchname)
    SHAOut = subprocess.check_output(['git',
                                      'merge-base',
                                      branchname,   # OUR version of develop
                                      'beta']    )
    SHA  = SHAOut.decode('utf-8').replace('\n', '')
    print('Done. SHA was %s' % SHA)
    print('Creating merge-tree')
    output = subprocess.check_output(['git',
                                      'merge-tree',
                                      SHA,
                                      'beta',
                                      branchname]) # View merge tree between beta and (our) develop
    output = output.decode('utf-8', 'ignore')
    print('Done:')
    #print(output)
    
    canMerge = ('<' * 5) not in output # '<' * 5 avoids git finding the expanded string in this file and thinking it is a merge conflict
    
    if canMerge:
        print('Merge of develop into beta is possible')
        # The below code is active, but only for testing
        merge_output = subprocess.check_output(['git', 'merge', '--no-ff', '--no-commit', 'develop']) #into beta
        merge_output = merge_output.decode('utf-8', 'ignore')
        if ("Automatic merge failed" in merge_output) or ("CONFLICT" in merge_output):
            print('Merge command failed to automatically merge.  Exiting without committing!')
        else:
            print('Merge command automatically merged successfully.')
            
            print('Staging files..')
            subprocess.call(['git', 'add', '-u'])
            print('Committing..')
            subprocess.call(['git', 'commit', '--no-verify', '-m', 
                             'Auto-merged develop -> beta (No conflicts, CI passed)'])
            print('Commit finished')
        
            PUSHKEY  = os.environ['PUSHKEY']
            push_uri = 'https://%s:%s@github.com/pyGSTio/pyGSTi.git' % (USER, PUSHKEY) # yikes
            try:
                print('Pushing to origin/beta. If this fails, there shouldn\'t be any useful output, since it would contain my access token')
                with open(os.devnull, 'w') as FNULL:
                    result = subprocess.call(['git', 'push', '--no-verify', push_uri, 'beta'], stdout=FNULL, stderr=FNULL)
                    if result != 0:
                        print('Secure push failed')
                    else:
                        print('Secure push worked')
            except:
                print('Secure push failed')    
    else:
        print('Potential merge conflicts found! Cannot merge beta into develop')

#if TRAVIS_BRANCH == "develop" and TRAVIS_PULL_REQUEST == "false":
#    print("Attempting to deploy on pypitest")
#    f = open(os.path.join(HOME,".pypirc"),"w")
#    f.write(pypirc_contents)
#    f.close()
#    print("Running setup.py...")
#    os.system("python setup.py sdist upload -r pypitest")

if TRAVIS_BRANCH == "master" and TRAVIS_PULL_REQUEST == "false":
    print("Attempting to deploy on pypi")
    f = open(os.path.join(HOME,".pypirc"),"w")
    f.write(pypirc_contents)
    f.close()
    print("Running setup.py...")
    os.system("python setup.py sdist upload -r pypi")
